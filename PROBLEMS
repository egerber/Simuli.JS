INDEXED APPROACH

select() function cannot return objects
	-> returns ids, can be used by connection
select() function cannot access state properties/input properties of units
	-> select() function internally takes the state properties
	-> state properties include properties
		- count_input_slots
		- used_input_slots
		- count_feedback_slots
		- used_feedback_slots
	> [each schema holds individual method for calling events]

select() and create() should not be part of state object
passing as extra arguments from event.action requires specific behavior for network
	-> treat network as sub system and apply specific behavior


How to deal with arbitrary long signal delays/where should values be stored?
	-> keep output values in different array and vary 
		- store unnecessary values
	-> keep connections in the form {from: 1, to:2, delay:10} and correspondingly  [0,0,0,1,0,0,0,0,1,1] etc.
		- redundant information + lots of memory use
	-> analyse which unit gets accessed with what delay and keep respective array with data over various timesteps
		- complicated when connections are changed

How to deal with delay0 connections
	-> call ids in topological order from graph (includes sub graph)

how to compute output from network component based on outputs of group "output"
-> set inputs of network to group "output" and compute_output returns identical output values


How to compute the graph topology with partially dealyed and direct connections?
	-> topology ignores delayed connections and adds them last since they don't need to be called in fixed order


apply_feedback(output,state,feedback) does not make sense when feedback is delayed, but also cannot link all outputs together
	-> save the output value of the feedback recipient together with the corresponding feedback value
	-> apply feedback regardless of the output that was given

Sometimes a component produces an array-output. Another component should be able to reference some index of this input (e.g array input -> network)
	-> every component specifies number of output ports (MUST correlate with the length of the output array)
		- how to decide which port should be used when connnecting such a unit to another?
			-> all units used unless
			-> use different type of connection
			-> process input in network allows to set input values
			-> define unit that broadcasts an array of values into different units
				- how?
			-> Mapper considers each output or input port as target

Should System Object have an output value?
	-> yes, in order to enable nesting at a later stage	
	-> 

How should on_input_deleted be notified?
	-> call session.delete_connection/session.delete_node, session calls executer, executer calls on_input_deleted
		- repeated calls when collective delete is operated 
			-> could implement method like delete_multiple([id1, id2, id3])


How to manage init() for system?
-> special case implemented in componentFactory: adds children and selection of groups
	- how does select/create have access to groups and their ids?
		-> state.groups returns selection which contains a field of all ids connected to a group
		   create triggers ComponentManager.create and adds ids into these fields

Deleting connections in graph is ambigious, since x can be connected with y several times with several delay lines
-> 

How to reset a specific link between two components? (e.g. remove feedforward link from comp1 to comp2 (delay 3))
-> iterate over selections in order to specify each component individually (new datatype: Virtual_component),
-> allows to say something like: input1.connect(input2, type="feedforward", port=1)
	- port selection could be part of the normal connect method (state1, state2)=>state2.used_slots+1
	- makes it problematic to "append" new connections since it requires iteration over all slots

How or when to initialize connections in the system
-> maybe as system.connect()
	- in this case the generation of new members should occur in this section as well
	- there is no system object onto which a connect() call could be called
		-> connection can be called in init() function

should the number of currently used slots and max number of slots be part of the state object?
-> if they do they must be no accessible by user somehow

- DynamicVariable.clone() does not make deep copy if properties are arrays

