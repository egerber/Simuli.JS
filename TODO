Add Seed functionality for whole algorithm in order to retrack the behavior in different runs
-> Every random generation call must be done via a fixed function which implements the seed-functionality. Otherwise there will be no seed

Configuration Testing Environment-
- run configuration several times over a specified number number of timesteps. Visualize results against each other. Calculate standard deviation between runs
- run several configurations against each other (averaged out). plot results against each other
	-> including different algorithms

principle for achieving nesting of units

Make a test of impementing a discrete spiking neural network

Rename "Unit" to "Component", "Element", or "Node"

Session.reset()

Rename inputs to input or figure out a uniform and consistent form of setting inputs between units

TODAY:
- on_input_changed 																									(DONE)
- session.get_data("csv","json", etc.)																				(NOSENSE)

TODO
- add_input()																										(DONE)
- remove_input(index)																								(MUST CHECK IF IT MAKES SENSE)
- test feedback logic in looped system
- rename model to network																							(DONE)
- send_feedback is processed depending on the corresponding input value												(DONE)
- Session delete_unit, network delete unit_types 																	(DONE)
- log units by groups instead of unit_types		 																      
- Connection works with type (RESET -via set_inputs and APPEND - via add_input)										(DONE)
- system connects member through .connect(connection_obj)		 													(DONE)
- session.define_component("Name", Specification);																	(DONE)
- rename unit to comonent 																							(DONE)
- describe tick() as fundament of the framework																		(DONE)

TODAY
- differentiate feedforward and feedback connections


Implement graph which can handle sub graphs
- 

Finish instance based implementation
- call tick()
- call compute_delayed_output_value
- call compute_output()
